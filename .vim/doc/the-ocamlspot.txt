*the-ocamlspot.txt*  An OCamlSpotter wrapper plugin with a lot of fun.

Author : cohama <cohama@live.jp>
License: The MIT License {{{
  Copyright (c) 2013 cohama

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
}}}

CONTENTS  *the-ocamlspot-contents*

Introduction    |the-ocamlspot-introduction|
Commands        |the-ocamlspot-commands|
Mappings        |the-ocamlspot-mappings|
Ohter features  |the-ocamlspot-other-features| 
Configuration   |the-ocamlspot-configuration|

==============================================================================
INTRODUCTION                                      *the-ocamlspot-introduction*

*the-ocamlspot.vim* is a wrapper of OCamlSpotter.
You can easily browse an OCaml code.
Indicating the type information of a term, jumping to the definition.

And a lot of features will be implemented soon!

This plugin depends on OCamlSpotter.

OCamlSpotter
http://opam.ocamlpro.com/pkg/ocamlspot.4.00.1.2.1.2.html

You should install OCamlSpotter before using this plugin.

==============================================================================
COMMANDS                                              *the-ocamlspot-commands*

:TheOCamlType                                                  *:TheOCamlType*
                Indicates the type information of the term under the cursor.

:TheOCamlDefPreview                                      *:TheOCamlDefPreview*
                Opens a preview window and shows the definition of the term
                under the cursor.

:TheOCamlDefEdit                                            *:TheOCamlDefEdit*
                Jumps to the definition of the term under the cursor by using
                |edit| command.

:TheOCamlDefSplit                                          *:TheOCamlDefSplit*
                Like :TheOCamlDefEdit but use |split|.

:TheOCamlDefVSplit                                        *:TheOCamlDefVSplit*
                Like :TheOCamlDefEdit but use |vsplit|.

:TheOCamlDefTab                                              *:TheOCamlDefTab*
                Like :TheOCamlDefEdit but use |tabedit|.

==============================================================================
MAPPINGS                                              *the-ocamlspot-mappings*

n <Plug>(the-ocamlspot-type)                      *<Plug>(the-ocamlspot-type)*
                Same as :TheOCamlType. <Leader>ot is mapped by default.

n <Plug>(the-ocamlspot-def-preview)        *<Plug>(the-ocamlspot-def-preview)*
                Same as :TheOCamlDefPreview. <Leader>op is mapped by default.

n <Plug>(the-ocamlspot-def-edit)              *<Plug>(the-ocamlspot-def-edit)*
n <Plug>(the-ocamlspot-def-split)            *<Plug>(the-ocamlspot-def-split)*
n <Plug>(the-ocamlspot-def-vsplit))         *<Plug>(the-ocamlspot-def-vsplit)*
n <Plug>(the-ocamlspot-def-tab)                *<Plug>(the-ocamlspot-def-tab)*
                Each are same as their correspoing definition jump commands.
                There is no default mapping.

==============================================================================
OTHER FEATURES                                  *the-ocamlspot-other-features*

Term highlighting

  When <Plug>(the-ocamlspot-type) is triggered, text correspoing an evaluated
  term is highlighted.

Auto type indication 

  When you do nothing in a while, <Plug>(the-ocamlspot-type) is automatically
  triggered.
  This waiting time depends on 'updatetime'.
  If the cursor line is include in the quickfix list, the location list or the
  syntastic error list, auto type indication is temporally disabled.

Balloon indication

  If you use vim with |GUI| and your vim was compiled with |+balloon_eval|,
  type information is also indicated in |balloon-eval| when you hovers the mouse
  cursor on a term.

==============================================================================
CONFIGURATION                                    *the-ocamlspot-configuration*

Default key mappings

  This plugin provides following default key mappings. If you want to disable
  these mappings by default, define *g:the_ocamlspot_no_default_key_mappings*
  in your |vimrc|.

        {lhs}           {rhs}                              ~
        ----------      ---------------------------------  ~
        <Leader>ot      <Plug>(the-ocamlspot-type)
        <Leader>op      <Plug>(the-ocamlspot-def-preview)

Auto type indication 

  If you want to disable this feature, define
  *g:the_ocamlspot_disable_auto_type* in your |vimrc|.

  (*g:the_ocamlspot_no_default_auto_commands* is deprecated. Do not use it.)

  If you do not want to disable auto type indication on an error line, define
  *g:the_ocamlspot_auto_type_always* in your |vimrc|.

Balloon indication

  If you want to disable this feature, define *g:the_ocamlspot_no_balloon* in
  your |vimrc|.

Customize highlighting color

  Of course you can customize the color of highlighting. The following
  highlight group is defined.

    TheOCamlSpotTree                                        *TheOCamlSpotTree*
        The color of a term under the cursor. This links |PmenuSel| by
        default.

    TheOCamlSpotSpot                                        *TheOCamlSpotSpot*
        The color of a definition. This links |MatchParen| by default.

  Yes. You can define these highlight group in your |vimrc|.

Example
>
        " disable default mappings
        let g:the_ocamlspot_no_default_key_mappings = 1

        " your settings are enabled when you open ocaml-type buffer.
        autocmd FileType ocaml call s:my_the_ocamlspot_map()
        function! s:the_ocamlspot_map()
           nnoremap <buffer> <M-i> <Plug>(the-ocamlspot-type)
           nnoremap <buffer> <M-p> <Plug>(the-ocamlspot-def-preview)
           nnoremap <buffer> <M-e> <Plug>(the-ocamlspot-def-edit)
           nnoremap <buffer> <M-s> <Plug>(the-ocamlspot-def-split)
           nnoremap <buffer> <M-v> <Plug>(the-ocamlspot-def-vsplit)
           nnoremap <buffer> <M-t> <Plug>(the-ocamlspot-def-tab))
        endfunction

        " highlight command should be called in autocmd
        autocmd ColorScheme,VimEnter * call s:the_ocamlspot_highlight()
        function! s:the_ocamlspot_highlight()
          " in terminal
          highlight TheOCamlSpotTree cterm=bold ctermbg=17

          " in gui
          " highlight TheOCamlSpotSpot gui=bold guibg=#001144
        endfunction
<


==============================================================================
vim:tw=78:ts=8:sts=8:sw=8:ft=help:norl:fen:fdl=0:
